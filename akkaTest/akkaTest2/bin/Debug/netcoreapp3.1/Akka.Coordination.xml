<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akka.Coordination</name>
    </assembly>
    <members>
        <member name="T:Akka.Coordination.Lease">
            <summary>
            API for a distributed lock.
            Any lease implementation should provide the following guarantees:
            <list type="bullet">A lease with the same name loaded multiple times, even on different nodes, is the same lease</list>
            <list type="bullet">Only one owner can acquire the lease at a time</list>
            </summary>
        </member>
        <member name="P:Akka.Coordination.Lease.Settings">
            <summary>
            Lease settings
            </summary>
        </member>
        <member name="M:Akka.Coordination.Lease.#ctor(Akka.Coordination.LeaseSettings)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.Lease"/> instance.
            </summary>
            <param name="settings">Lease settings</param>
        </member>
        <member name="M:Akka.Coordination.Lease.Acquire">
             <summary>
             Try to acquire the lease. The returned <see cref="T:System.Threading.Tasks.Task"/> will be completed with `true`
             if the lease could be acquired, i.e. no other owner is holding the lease.
            
             The returned <see cref="T:System.Threading.Tasks.Task"/> will be completed with `false` if the lease for certain couldn't be
             acquired, e.g. because some other owner is holding it. It's completed with <see cref="T:Akka.Coordination.LeaseException"/>
             failure if it might not have been able to acquire the lease, e.g. communication timeout
             with the lease resource.
            
             The lease will be held by the <see cref="P:Akka.Coordination.LeaseSettings.OwnerName"/> until it is released
             with <see cref="M:Akka.Coordination.Lease.Release"/>. A Lease implementation will typically also lose the ownership
             if it can't maintain its authority, e.g. if it crashes or is partitioned from the lease
             resource for too long.
            
             <see cref="M:Akka.Coordination.Lease.CheckLease"/> can be used to verify that the owner still has the lease.
             </summary>
             <returns></returns>
        </member>
        <member name="M:Akka.Coordination.Lease.Acquire(System.Action{System.Exception})">
            <summary>
            Same as <see cref="M:Akka.Coordination.Lease.Acquire"/> with an additional callback
            that is called if the lease is lost. The lease can be lose due to being unable
            to communicate with the lease provider.
            Implementations should not call leaseLostCallback until after the returned future
            has been completed
            </summary>
            <param name="leaseLostCallback"></param>
            <returns></returns>
        </member>
        <member name="M:Akka.Coordination.Lease.Release">
            <summary>
            Release the lease so some other owner can acquire it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Akka.Coordination.Lease.CheckLease">
            <summary>
            Check if the owner still holds the lease.
            `true` means that it certainly holds the lease.
            `false` means that it might not hold the lease, but it could, and for more certain
            response you would have to use <see cref="M:Akka.Coordination.Lease.Acquire"/> or <see cref="M:Akka.Coordination.Lease.Release"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Akka.Coordination.LeaseException">
            <summary>
            Lease exception. Lease implementation should use it to report issues when acquiring lease
            </summary>
        </member>
        <member name="M:Akka.Coordination.LeaseException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.LeaseException"/> instance.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Akka.Coordination.LeaseException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.LeaseException"/> instance.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerEx">Inner exception</param>
        </member>
        <member name="T:Akka.Coordination.LeaseProviderExtensionProvider">
            <summary>
            Lease extension for distributed lock
            </summary>
        </member>
        <member name="M:Akka.Coordination.LeaseProviderExtensionProvider.CreateExtension(Akka.Actor.ExtendedActorSystem)">
            <summary>
            Creates the lease extension using a given actor system.
            </summary>
            <param name="system">The actor system to use when creating the extension.</param>
            <returns>The extension created using the given actor system.</returns>
        </member>
        <member name="T:Akka.Coordination.LeaseProvider">
            <summary>
            This class represents an <see cref="T:Akka.Actor.ActorSystem"/> extension used for distributed lock within the actor system.
            </summary>
        </member>
        <member name="M:Akka.Coordination.LeaseProvider.Get(Akka.Actor.ActorSystem)">
            <summary>
            Retrieves the extension from the specified actor system.
            </summary>
            <param name="system">The actor system from which to retrieve the extension.</param>
            <returns>The extension retrieved from the given actor system.</returns>
        </member>
        <member name="M:Akka.Coordination.LeaseProvider.#ctor(Akka.Actor.ExtendedActorSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Akka.Coordination.LeaseProvider"/> class.
            </summary>
            <param name="system">The actor system that hosts the lease.</param>
        </member>
        <member name="M:Akka.Coordination.LeaseProvider.DefaultConfig">
            <summary>
            Retrieves the default lease options that Akka.NET uses when no configuration has been defined.
            </summary>
            <returns>The configuration that contains default values for all lease options.</returns>
        </member>
        <member name="M:Akka.Coordination.LeaseProvider.GetLease(System.String,System.String,System.String)">
            <summary>
            The configuration define at <paramref name="configPath"/> must have a property `lease-class` that defines
            the fully qualified class name of the <see cref="T:Akka.Coordination.Lease"/> implementation.
            The class must implement <see cref="T:Akka.Coordination.Lease"/> and have constructor with <see cref="T:Akka.Coordination.LeaseSettings"/> parameter and
            optionally <see cref="T:Akka.Actor.ActorSystem"/> parameter.
            </summary>
            <param name="leaseName">the name of the lease resource</param>
            <param name="configPath">the path of configuration for the lease</param>
            <param name="ownerName">the owner that will `acquire` the lease, e.g. hostname and port of the ActorSystem</param>
            <returns></returns>
        </member>
        <member name="T:Akka.Coordination.LeaseSettings">
            <summary>
            The settings used for the <see cref="T:Akka.Coordination.Lease"/>
            </summary>
        </member>
        <member name="M:Akka.Coordination.LeaseSettings.Create(Akka.Configuration.Config,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.LeaseSettings"/> instance.
            </summary>
            <param name="config">Lease config</param>
            <param name="leaseName">Lease name</param>
            <param name="ownerName">Lease owner</param>
            <returns>The requested settings.</returns>
        </member>
        <member name="P:Akka.Coordination.LeaseSettings.LeaseName">
            <summary>
            Lease name
            </summary>
        </member>
        <member name="P:Akka.Coordination.LeaseSettings.OwnerName">
            <summary>
            Lease owner
            </summary>
        </member>
        <member name="P:Akka.Coordination.LeaseSettings.TimeoutSettings">
            <summary>
            Timeout settings
            </summary>
        </member>
        <member name="P:Akka.Coordination.LeaseSettings.LeaseConfig">
            <summary>
            Lease config
            </summary>
        </member>
        <member name="P:Akka.Coordination.LeaseSettings.LeaseType">
            <summary>
            Lease implementation type
            </summary>
        </member>
        <member name="M:Akka.Coordination.LeaseSettings.#ctor(System.String,System.String,Akka.Coordination.TimeoutSettings,Akka.Configuration.Config)">
            <summary>
            Creates a new instance of the <see cref="T:Akka.Coordination.LeaseSettings"/>.
            </summary>
            <param name="leaseName">Lease name</param>
            <param name="ownerName">Lease owner</param>
            <param name="timeoutSettings">Timeout settings</param>
            <param name="leaseConfig">Lease config</param>
        </member>
        <member name="M:Akka.Coordination.LeaseSettings.WithTimeoutSettings(Akka.Coordination.TimeoutSettings)">
            <summary>
            Create a <see cref="T:Akka.Coordination.LeaseSettings"/> with specified <see cref="P:Akka.Coordination.LeaseSettings.TimeoutSettings"/>.
            </summary>
            <param name="timeoutSettings">timeout settings</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Coordination.LeaseSettings.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Coordination.LeaseTimeoutException">
            <summary>
            Lease timeout exception. Lease implementation should use it to report issues when lease is lost
            </summary>
        </member>
        <member name="M:Akka.Coordination.LeaseTimeoutException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.LeaseTimeoutException"/> instance.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Akka.Coordination.LeaseTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.LeaseTimeoutException"/> instance.
            </summary>
            <param name="message">Exception message</param>
            <param name="innerEx">Inner exception</param>
        </member>
        <member name="T:Akka.Coordination.LeaseUsageSettings">
            <summary>
            Lease settings for use in singleton and sharding
            </summary>
        </member>
        <member name="P:Akka.Coordination.LeaseUsageSettings.LeaseImplementation">
            <summary>
            Config path of the lease to be taken
            </summary>
        </member>
        <member name="P:Akka.Coordination.LeaseUsageSettings.LeaseRetryInterval">
            <summary>
            The interval between retries for acquiring the lease
            </summary>
        </member>
        <member name="M:Akka.Coordination.LeaseUsageSettings.#ctor(System.String,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.LeaseUsageSettings"/> instance.
            </summary>
            <param name="leaseImplementation">TConfig path of the lease to be taken</param>
            <param name="leaseRetryInterval">The interval between retries for acquiring the lease</param>
        </member>
        <member name="M:Akka.Coordination.LeaseUsageSettings.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Akka.Coordination.TimeoutSettings">
            <summary>
            The timeout settings used for the <see cref="T:Akka.Coordination.Lease"/>
            </summary>
        </member>
        <member name="M:Akka.Coordination.TimeoutSettings.Create(Akka.Configuration.Config)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.TimeoutSettings"/> instance.
            </summary>
            <param name="config">Lease config</param>
            <returns>The requested settings.</returns>
        </member>
        <member name="P:Akka.Coordination.TimeoutSettings.HeartbeatInterval">
            <summary>
            Interval for communicating with the third party to confirm the lease is still held
            </summary>
        </member>
        <member name="P:Akka.Coordination.TimeoutSettings.HeartbeatTimeout">
            <summary>
            If the node that acquired the leases crashes, how long should the lease be held before another owner can get it
            </summary>
        </member>
        <member name="P:Akka.Coordination.TimeoutSettings.OperationTimeout">
            <summary>
            Lease implementations are expected to time out acquire and release calls or document that they do not implement an operation timeout
            </summary>
        </member>
        <member name="M:Akka.Coordination.TimeoutSettings.#ctor(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:Akka.Coordination.TimeoutSettings"/> instance.
            </summary>
            <param name="heartbeatInterval">Interval for communicating with the third party to confirm the lease is still held</param>
            <param name="heartbeatTimeout">If the node that acquired the leases crashes, how long should the lease be held before another owner can get it</param>
            <param name="operationTimeout">Lease implementations are expected to time out acquire and release calls or document that they do not implement an operation timeout</param>
        </member>
        <member name="M:Akka.Coordination.TimeoutSettings.WithHeartbeatInterval(System.TimeSpan)">
            <summary>
            Create a <see cref="T:Akka.Coordination.TimeoutSettings"/> with specified heartbeat interval.
            </summary>
            <param name="heartbeatInterval">Interval for communicating with the third party to confirm the lease is still held</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Coordination.TimeoutSettings.WithHeartbeatTimeout(System.TimeSpan)">
            <summary>
            Create a <see cref="T:Akka.Coordination.TimeoutSettings"/> with specified heartbeat timeout.
            </summary>
            <param name="heartbeatTimeout">If the node that acquired the leases crashes, how long should the lease be held before another owner can get it</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Coordination.TimeoutSettings.withOperationTimeout(System.TimeSpan)">
            <summary>
            Create a <see cref="T:Akka.Coordination.TimeoutSettings"/> with specified operation timeout.
            </summary>
            <param name="operationTimeout">Lease implementations are expected to time out acquire and release calls or document that they do not implement an operation timeout</param>
            <returns></returns>
        </member>
        <member name="M:Akka.Coordination.TimeoutSettings.ToString">
            <inheritdoc/>
        </member>
    </members>
</doc>
